<?php
namespace App\Controller\Dashboard;

use App\Controller\AppController;
use Cake\Datasource\ConnectionManager;
use Cake\ORM\TableRegistry;

/**
 * Groups Controller
 *
 * @property \App\Model\Table\GroupsTable $Groups
 *
 * @method \App\Model\Entity\Group[] paginate($object = null, array $settings = [])
 */
class GroupsController extends AppController
{
    private $user;
    private $invites;
    public $paginate = [
        'limit' => 10,
    ];
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->user =$this->Auth->user();
        $this->loadComponent('Paginator');
        $this->loadComponent('Invites');

        $this->invites = $this->Invites->getUserGroupsInvites($this->user['id']);

    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {

        $query = $this->Groups->find();
        $myGroups = $query->matching('UsersGroup',function($q){
            return $q->where(['UsersGroup.user_id'=>$this->user['id'],'UsersGroup.invite_status'=>1]);
        })->order(['role'=>'DESC']);


        $groups = $this->paginate($myGroups);

        $this->set(compact('groups','myGroups'));
        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('_serialize', ['groups']);
    }

    /**
     * View method
     *
     * @param string|null $id Group id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $id = $this->request->getParam('id');
        $userTable = TableRegistry::get('Users');
        $group = $this->Groups->get($id, [
            'contain' => ['GroupEvents', 'Lottery', 'UsersGroup']
        ]);


        $usersFromGroup = $userTable->find('all')->matching('UsersGroup',function($q) use ($id) {
            return $q->where(['group_id'=>$id,'invite_status'=>1]);
        });
        $creator = $this->Groups->UsersGroup->find()->where(['group_id'=>$id,'role'=>2])->first();
        $this->paginate($usersFromGroup);


        $this->set('usersFromGroup',$usersFromGroup);
        $this->set('invites',$this->invites);
       $this->set('group', $group);
       $this->set('creator',$creator);
       $this->set('user',$this->user);
       $this->set('_serialize', ['group']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $this->set('user',$this->user);
        $group = $this->Groups->newEntity();
        $id = uniqid();
        if ($this->request->is('post')) {

            $group = $this->Groups->patchEntity($group, $this->request->getData());
            if ($this->Groups->save($group,['associated' => ['UsersGroup']])) {

                $userGroupData = ['user_id'=>$this->user['id'],'group_id'=>$group->id,'role'=>2,'invite_status'=>1];
                $userGroup = $this->Groups->UsersGroup->newEntity($userGroupData);
                $this->Groups->UsersGroup->save($userGroup);
                $this->Flash->success(__("O grupo $group[name] foi criado com sucesso "));

                return $this->redirect(['action' => 'add']);
            }
            $this->Flash->error(__('Não foi possivel criar o grupo pois erros ocorreram:'),['params'=>['errors'=>$group->getErrors()]]);
        }
        $this->set(compact('group','id'));
        $this->set('invites',$this->invites);
        $this->set('_serialize', ['group']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Group id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $group = $this->Groups->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $group = $this->Groups->patchEntity($group, $this->request->getData());
            if ($this->Groups->save($group)) {
                $this->Flash->success(__('The group has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The group could not be saved. Please, try again.'));
        }
        $this->set(compact('group'));
        $this->set('invites',$this->invites);
        $this->set('_serialize', ['group']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Group id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $group = $this->Groups->get($id);
        if ($this->Groups->delete($group)) {
            $this->Flash->success(__('The group has been deleted.'));
        } else {
            $this->Flash->error(__('The group could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function addMember($id = null,$uid = null){
        $id = $this->request->getParam('id');
        $group = $this->Groups->get($id);

        if($this->request->is('post')){
            $uid = $this->request->getParam('uid');
            $userGroupData = ['user_id'=>$uid,'group_id'=>$id,'role'=>1,'invite_status'=>0];
            $userGroup = $this->Groups->UsersGroup->newEntity($userGroupData);
            $this->Groups->UsersGroup->save($userGroup);
            $this->Flash->success(__("O convite para o membro foi enviado!"));
            $this->redirect(['_name'=>'groups.view.addMember','id'=>$id]);

        }

        $conn = ConnectionManager::get('default');
        $stmt = $conn->query("SELECT * From Users u Where u.id NOT IN (Select ug.user_id FROM users_group ug WHERE ug.group_id = '$id')");
        $usersNotInGroup = $stmt->fetchAll('assoc');

        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('group',$group);
        $this->set('usersNotInGroup',$usersNotInGroup);
    }

    public function invites(){

        $this->set('invites',$this->invites);
        $this->set('user',$this->user);
    }

    public function handleInvites($gid = null){
        $type = $this->request->getParam('?')['type'];
        $gid = $this->request->getParam('gid');
        $userGroupsTable = TableRegistry::get('UsersGroup');
        $userGroups = $this->Groups->UsersGroup->find()->where(['group_id'=>$gid,'user_id'=>$this->user['id']])->first();
        switch($type){
            case 'accept':
                $userGroups->invite_status = 1;
                $userGroupsTable->save($userGroups);
                $this->Flash->success(__('Convite aceito! Agora você já pode participar do grupo'));
                return $this->redirect('/dashboard/invites');
                break;
            case 'reject':
                $userGroups->invite_status = 2;
                $userGroupsTable->save($userGroups);
                $this->Flash->success(__('Convite rejeitado'));
                return $this->redirect('/dashboard/invites');
                break;

            default:
                return $this->redirect('/dashboard/invites');
        }
    }
}

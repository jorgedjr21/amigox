<?php
namespace App\Controller\Dashboard;

use App\Controller\AppController;
use Cake\Datasource\ConnectionManager;
use Cake\I18n\Time;
use Cake\ORM\TableRegistry;

/**
 * Groups Controller
 *
 * @property \App\Model\Table\GroupsTable $Groups
 *
 * @method \App\Model\Entity\Group[] paginate($object = null, array $settings = [])
 */
class GroupsController extends AppController
{
    private $user;
    private $invites;
    private $eventNotifications;
    private $sortNotifications;
    public $paginate = [
        'limit' => 12,
    ];
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->user =$this->Auth->user();
        $this->loadComponent('Paginator');
        $this->loadComponent('Invites');

        $this->loadComponent('Notifications');
        $this->invites = $this->Invites->getUserGroupsInvites($this->user['id']);
        $this->eventNotifications = $this->Notifications->getEventsNotificationsFromUser($this->user['id']);
        $this->sortNotifications = $this->Notifications->getSortNotificationsFromUser($this->user['id']);

    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {

        $query = $this->Groups->find();
        $myGroups = $query->matching('UsersGroup',function($q){
            return $q->where(['UsersGroup.user_id'=>$this->user['id'],'UsersGroup.invite_status'=>1]);
        })->order(['role'=>'DESC']);


        $groups = $this->paginate($myGroups);

        $this->set(compact('groups','myGroups'));
        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('_serialize', ['groups']);
    }

    /**
     * View method
     *
     * @param string|null $id Group id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $id = $this->request->getParam('id');
        $userTable = TableRegistry::get('Users');
        $group = $this->Groups->get($id, [
            'contain' => ['GroupEvents','UsersGroup'],
        ]);
        $myFriend = null;

        $groupEvents = $this->Groups->GroupEvents->find()->where(['group_id'=>$id])->matching('Event',function($q){
            return $q->where(['datetime >'=>Time::now('America/Sao_Paulo')]);
        })->order(['datetime'=>'ASC'])->limit(3);


        $usersFromGroup = $userTable->find('all')->matching('UsersGroup',function($q) use ($id) {
            return $q->where(['group_id'=>$id,'invite_status'=>1]);
        });
        $creator = $this->Groups->UsersGroup->find()->where(['group_id'=>$id,'role'=>2])->first();
        $this->paginate($usersFromGroup);


        $this->set('usersFromGroup',$usersFromGroup);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
       $this->set('group', $group);
       $this->set('groupEvents',$groupEvents);
       $this->set('creator',$creator);
       $this->set('user',$this->user);
       $this->set('_serialize', ['group']);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $this->set('user',$this->user);
        $group = $this->Groups->newEntity();
        $id = uniqid();
        if ($this->request->is('post')) {

            $group = $this->Groups->patchEntity($group, $this->request->getData());
            if ($this->Groups->save($group,['associated' => ['UsersGroup']])) {

                $userGroupData = ['user_id'=>$this->user['id'],'group_id'=>$group->id,'role'=>2,'invite_status'=>1];
                $userGroup = $this->Groups->UsersGroup->newEntity($userGroupData);
                $this->Groups->UsersGroup->save($userGroup);
                $this->Flash->success(__("O grupo $group[name] foi criado com sucesso "));

                return $this->redirect(['action' => 'add']);
            }
            $this->Flash->error(__('Não foi possivel criar o grupo pois erros ocorreram:'),['params'=>['errors'=>$group->getErrors()]]);
        }
        $this->set(compact('group','id'));
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('_serialize', ['group']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Group id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $group = $this->Groups->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $group = $this->Groups->patchEntity($group, $this->request->getData());
            if ($this->Groups->save($group)) {
                $this->Flash->success(__('The group has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The group could not be saved. Please, try again.'));
        }
        $this->set(compact('group'));
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('_serialize', ['group']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Group id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $group = $this->Groups->get($id);
        if ($this->Groups->delete($group)) {
            $this->Flash->success(__('The group has been deleted.'));
        } else {
            $this->Flash->error(__('The group could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    /**
     * Save new member to group
     * @param int|null $id
     * @param int|null $uid
     */
    public function addMember($id = null,$uid = null){
        $id = $this->request->getParam('id');
        $group = $this->Groups->get($id);

        if($this->request->is('post')){
            $uid = $this->request->getParam('uid');
            $userGroupData = ['user_id'=>$uid,'group_id'=>$id,'role'=>1,'invite_status'=>0];
            $userGroup = $this->Groups->UsersGroup->newEntity($userGroupData);
            $this->Groups->UsersGroup->save($userGroup);
            $this->Flash->success(__("O convite para o membro foi enviado!"));
            $this->redirect(['_name'=>'groups.view.addMember','id'=>$id]);

        }

        $conn = ConnectionManager::get('default');
        $stmt = $conn->query("SELECT * From Users u Where u.id NOT IN (Select ug.user_id FROM users_group ug WHERE ug.group_id = '$id')");
        $usersNotInGroup = $stmt->fetchAll('assoc');

        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('group',$group);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('usersNotInGroup',$usersNotInGroup);
    }

    /*
     * Invite view method
     */
    public function invites(){

        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('user',$this->user);
    }

    /*
     * handle the invites
     */
    public function handleInvites($gid = null){
        $type = $this->request->getParam('?')['type'];
        $gid = $this->request->getParam('gid');
        $userGroupsTable = TableRegistry::get('UsersGroup');
        $userGroups = $this->Groups->UsersGroup->find()->where(['group_id'=>$gid,'user_id'=>$this->user['id']])->first();
        switch($type){
            case 'accept':
                $userGroups->invite_status = 1;
                $userGroupsTable->save($userGroups);
                $this->Flash->success(__('Convite aceito! Agora você já pode participar do grupo'));
                return $this->redirect('/dashboard/invites');
                break;
            case 'reject':
                $userGroups->invite_status = 2;
                $userGroupsTable->save($userGroups);
                $this->Flash->success(__('Convite rejeitado'));
                return $this->redirect('/dashboard/invites');
                break;

            default:
                return $this->redirect('/dashboard/invites');
        }
    }

    /**
     * @param null|string $id group ID
     * @param null|string $eid event ID
     * @return \Cake\Http\Response|null
     */
    public function sort($id = null,$eid=null){
        $gid = $this->request->getParam('id');
        $eid = $this->request->getParam('eid');

        if($this->request->is('post')){
            $usersFromGroup = $this->Groups->UsersGroup->find('all')->where(['group_id'=>$gid]);
            $users = [];

            foreach($usersFromGroup as $ufg){
                $users[] = $ufg['user_id'];
            }
            //Embaralha o array de ids de usuários;
            shuffle($users);
            //Separa em duas partes
            $arrHelper = array_chunk($users,count($users)/2);

            //Atribui a users1 primeira metade
            $users1 = $arrHelper[0];
            //Atribuiu a users2 a segunda metade
            $users2 = $arrHelper[1];

            $lottery = [];
            for ($i = 0; $i < count($users1) ; $i++){
                $lottery[$i]['group_id'] = $gid;
                $lottery[$i]['event_id'] = $eid;
                $lottery[$i]['user1'] = $users1[$i];
                $lottery[$i]['user2'] = $users2[$i];
            }

            $lotteryTable = TableRegistry::get('Lottery');
            $lottery = $lotteryTable->newEntities($lottery);
            $result = $lotteryTable->saveMany($lottery);

            $notif = [];
            /* Cria array de notificações para todos os usuários*/
            foreach ($usersFromGroup as $ug){
                $notif[] = ['user_id'=>$ug['user_id'],'event_id'=>$eid,'status'=>10];
            }

            /* Cria entidades das notificações e salva*/
            $this->Notifications->saveEventsNotifications($notif);

            if($result){
                $this->Flash->success(__('Sorteio realizado com sucesso!'));
            }else{
                $this->Flash->error(__('Não foi possivel realizar o sorteio, tente novamente'));
            }

            return $this->redirect(['_name'=>'groups.viewEvent','eid'=>$eid]);
        }
        return $this->redirect(['_name'=>'groups.viewEvent','eid'=>$eid]);
    }


    public function newEvent($id = null){
        $id = $this->request->getParam('id');
        $group = $this->Groups->get($id);

        if($this->request->is('post')){
            $data = $this->request->getData();
            if(empty($data['time']) || empty($data['date'])){
                $this->Flash->error(__('Atenção, a data e horário do evento não podem ficar em branco'));
                return $this->redirect(['_name' => 'groups.events.new','id'=>$id]);
            }
            $data['datetime'] = $this->request->getData(['date']).' '.$this->request->getData('time');
            unset($data['time'],$data['date']);
            $data['datetime'] = Time::createFromFormat('d/m/Y H:i',$data['datetime'],'America/Sao_Paulo');

            $eventTable = TableRegistry::get('Event');
            $event = $eventTable->newEntity($data);

            if($eventTable->save($event)){
                //cria Relação entre evento e Grupo
                $groupEvent = ['group_id'=>$id,'event_id'=>$event->id];
                $groupEventEntity = $this->Groups->GroupEvents->newEntity($groupEvent);
                $this->Groups->GroupEvents->save($groupEventEntity);

                /* Recupera usuarios do grupo*/
                $usersGroup = $this->Groups->UsersGroup->find()->where(['group_id'=>$id]);
                $notif = [];
                /* Cria array de notificações para todos os usuários*/
                foreach ($usersGroup as $ug){
                    $notif[] = ['user_id'=>$ug['user_id'],'event_id'=>$event->id,'status'=>0];
                }

                /* Cria entidades das notificações e salva*/
                $this->Notifications->saveEventsNotifications($notif);

                $this->Flash->success(__('Evento '.$event->name.' criado com sucesso'));
                return $this->redirect(['_name' => 'groups.view','id'=>$id]);
            }
            $this->Flash->error(__('Não foi possivel criar o grupo pois erros ocorreram:'),['params'=>['errors'=>$event->getErrors()]]);

        }

        $this->set('group',$group);
        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);

    }

    public function viewEvent($eid = null){
        $eid = $this->request->getParam('eid');
        $eventTable = TableRegistry::get('Event');
        $groupEventsTable = TableRegistry::get('GroupEvents');
        $usersGroupTable = TableRegistry::get('UsersGroup');
        $lotteryTable = TableRegistry::get('Lottery');
        $eventsNotificationTable = TableRegistry::get('EventsNotifications');

        $groupEvents = $groupEventsTable->find()->where(['event_id'=>$eid])->first();


        $lottery = $lotteryTable->find()
            ->where(['group_id'=>$groupEvents->group_id,'event_id'=>$eid,'user1'=>$this->user['id']])
            ->orWhere(['group_id'=>$groupEvents->group_id,'event_id'=>$eid,'user2'=>$this->user['id']])
            ->first();
        $creator = $usersGroupTable->find()
            ->where(['group_id'=>$groupEvents->group_id,'user_id'=>$this->user['id'],'role'=>2])
            ->first();


        $myFriend = null;


        if(!is_null($lottery)){
            $userTable = TableRegistry::get('Users');
            if($lottery->user1 == $this->user['id'])
                $myFriend = $userTable->get($lottery->user2);
            else
                $myFriend = $userTable->get($lottery->user1);
            $myFriend['preferences'] = explode(',',$myFriend['preferences']);
        }
        $query = $eventTable->find('all')
            ->where(['id'=>$eid,'datetime >'=>Time::now('America/Sao_Paulo')])
            ->matching('GroupEvents',function($q) use($eid){
                return $q->where(['event_id'=>$eid]);
            });


        /** atualiza notificação para vista (status 1) */
        $notification = $eventsNotificationTable->find()
            ->where(['user_id'=>$this->user['id'],'event_id'=>$eid,'status'=>0])
            ->orWhere(['user_id'=>$this->user['id'],'event_id'=>$eid,'status'=>10])
            ->first();
        if(!is_null($notification)){
           $notification->status = 1;
           $eventsNotificationTable->save($notification);
        }

        $event = $query->first();

        $this->set('user',$this->user);
        $this->set('creator',$creator);
        $this->set('myFriend',$myFriend);
        $this->set('lottery',$lottery);
        $this->set('event',$event);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);

    }
}

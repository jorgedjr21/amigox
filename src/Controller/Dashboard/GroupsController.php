<?php
namespace App\Controller\Dashboard;

use App\Controller\AppController;
use Cake\Datasource\ConnectionManager;
use Cake\I18n\Time;
use Cake\ORM\TableRegistry;

/**
 * Groups Controller
 *
 * @property \App\Model\Table\GroupsTable $Groups
 *
 * @method \App\Model\Entity\Group[] paginate($object = null, array $settings = [])
 */
class GroupsController extends AppController
{
    private $user;
    private $invites;
    private $eventNotifications;
    private $sortNotifications;
    private $messageNotifications;
    public $paginate = [
        'limit'     => 12,
        //'UsersGroup' => ['scope'=>'users'],
        //'Messages'  => ['scope'=>'messages']
    ];

    /**
     * Inicia componentes do framework e seta variaveis de notificação
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->user =$this->Auth->user();
        $this->loadComponent('Paginator');

        //Componentes criados para gerenciar notificações
        $this->loadComponent('Invites');
        $this->loadComponent('Notifications');

        $this->invites = $this->Invites->getUserGroupsInvites($this->user['id']);
        $this->eventNotifications = $this->Notifications->getEventsNotificationsFromUser($this->user['id']);
        $this->sortNotifications = $this->Notifications->getSortNotificationsFromUser($this->user['id']);
        $this->messageNotifications = $this->Notifications->getMessageNotificationsFromUser($this->user['id']);

    }

    /**
     * Index mostra os grupos do usuario logado
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {

        $query = $this->Groups->find();
        $myGroups = $query->matching('UsersGroup',function($q){
            return $q->where(['UsersGroup.user_id'=>$this->user['id'],'UsersGroup.invite_status'=>1]);
        })->order(['role'=>'DESC']);


        $groups = $this->paginate($myGroups);

        $this->set(compact('groups','myGroups'));
        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('messageNotifications',$this->messageNotifications);
        $this->set('_serialize', ['groups']);
    }

    /**
     * View mostra as informações de um grupo em especifico do usuário logado
     *
     * @param string|null $id Group id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $id = $this->request->getParam('id');
        $userTable = TableRegistry::get('Users');
        //recupera notificações de mensagens
        $messageNotificationsTable = TableRegistry::get('MessagesNotifications');

        //variavel para verificar se o usuário tem acesso ao grupo
        $groupCheck = $this->Groups->UsersGroup->find()->where(['user_id'=>$this->user['id'],'group_id'=>$id,'invite_status'=>1])->first();

        //se groupCheck for nulo, não tem acesso
        if(is_null($groupCheck)){
            $this->set('canSee',false);
        }else{
            //recupera mensagens do grupo
            $messages = $this->Groups->Messages->find()->where(['group_id'=>$id])->orderDesc('Messages.id')->contain(['Users']);
            //recupera dados do grupo
            $group = $this->Groups->get($id);

            //recupera os próximos 3 eventos do grupo
            $groupEvents = $this->Groups->GroupEvents->find()->where(['group_id'=>$id])->matching('Event',function($q){
                return $q->where(['datetime >'=>Time::now('America/Sao_Paulo')]);
            })->order(['datetime'=>'ASC'])->limit(3);

            //recupera os usuários do grupo
            $usersFromGroup = $userTable->find('all')->matching('UsersGroup',function($q) use ($id) {
                return $q->where(['group_id'=>$id,'invite_status'=>1]);
            });
            //recupera o criador do grupo
            $creator = $this->Groups->UsersGroup->find()->where(['group_id'=>$id,'role'=>2])->first();

            //Paginação de mensagens
            $messages = $this->paginate($messages);

            /** atualiza notificação para vista (status 1) */
            $notifications = $messageNotificationsTable->find()
                ->where(['user_id'=>$this->user['id'],'group_id'=>$id,'status'=>0]);

            //Se as notificações não forem nulas, atualiza o status delas
            if(!is_null($notifications)){
                foreach($notifications as $notification){
                    $notification->status = 1;
                    $messageNotificationsTable->save($notification);
                }
            }

            // Configuração de variaveis para View
            $this->set(compact('usersFromGroup','messages'));
            $this->set('group', $group);
            $this->set('groupEvents',$groupEvents);
            $this->set('creator',$creator);
            $this->set('canSee',true);
            $this->set('_serialize', ['group']);
        }

        //Configuração de variaveis para view
        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('messageNotifications',$this->messageNotifications);


    }

    /**
     * Add cria um novo grupo
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        // cria entidade de grupo
        $group = $this->Groups->newEntity();
        $id = uniqid();
        //se requisição for post
        if ($this->request->is('post')) {
            //popula entidade de grupo com os dados do form
            $group = $this->Groups->patchEntity($group, $this->request->getData());
            //se salvar retorna sucesso
            if ($this->Groups->save($group,['associated' => ['UsersGroup']])) {

                //Cria userGroup com o usuario que tá criando o grupo e role 2 = criador
                $userGroupData = ['user_id'=>$this->user['id'],'group_id'=>$group->id,'role'=>2,'invite_status'=>1];
                $userGroup = $this->Groups->UsersGroup->newEntity($userGroupData);
                $this->Groups->UsersGroup->save($userGroup);
                $this->Flash->success(__("O grupo $group[name] foi criado com sucesso "));

                return $this->redirect(['action' => 'add']);
            }
            $this->Flash->error(__('Não foi possivel criar o grupo pois erros ocorreram:'),['params'=>['errors'=>$group->getErrors()]]);
        }
        //configuração de variáveis para view
        $this->set(compact('group','id'));
        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('messageNotifications',$this->messageNotifications);
        $this->set('_serialize', ['group']);
    }

    /**
     * Salva novo membro no grupo
     * @param int|null $id
     * @param int|null $uid
     */
    public function addMember($id = null,$uid = null){

        $id = $this->request->getParam('id');
        //recupera grupo
        $group = $this->Groups->get($id);

        //Se requisição for post, salva usuário no grupo
        if($this->request->is('post')){
            //recupera id de usuario
            $uid = $this->request->getParam('uid');
            //adiciona usuario na tablea UserGroup
            $userGroupData = ['user_id'=>$uid,'group_id'=>$id,'role'=>1,'invite_status'=>0];
            $userGroup = $this->Groups->UsersGroup->newEntity($userGroupData);
            $this->Groups->UsersGroup->save($userGroup);

            //Configura mensagem de sucesso
            $this->Flash->success(__("O convite para o membro foi enviado!"));
            $this->redirect(['_name'=>'groups.view.addMember','id'=>$id]);

        }

        //Query para recuperar usuários que não estão no grupo
        //Não consegui fazer utilizando o ORM
        $conn = ConnectionManager::get('default');
        $stmt = $conn->query("SELECT * From users u Where u.id NOT IN (Select ug.user_id FROM users_group ug WHERE ug.group_id = '$id')");

        //recupera os usuarios que não estáo no grupo
        $usersNotInGroup = $stmt->fetchAll('assoc');

        //Configuração de variavies para view
        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('group',$group);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('messageNotifications',$this->messageNotifications);
        $this->set('usersNotInGroup',$usersNotInGroup);
    }


    /**
     * envia mensagem para um grupo
     * @param null $id
     * @return \Cake\Http\Response|null
     */
    public function sendMessage($id = null){
        $id = $this->request->getParam('id');

        //Se requisição for Post, envia mensagem
        if($this->request->is('post')){
            //Recupera referencia da tabela de usuarios
            $userTable = TableRegistry::get('Users');
            //Recupera referencia da tabela de mensagens
            $messageTable = TableRegistry::get('Messages');
            //Dados do Form
            $data = $this->request->getData();
            //Recupera usuarios do grupo
            $usersFromGroup = $userTable->find('all')->matching('UsersGroup',function($q) use ($id) {
                return $q->where(['group_id'=>$id,'invite_status'=>1]);
            });

            //Configurações adicionais da mensagem
            $data['user_id'] = $this->user['id'];
            $data['group_id'] = $id;
            $data['datetime'] = Time::now('America/Sao_Paulo');
            //Cria entidade de mensagens e tenta salvar
            $message = $messageTable->newEntity($data);
            if($messageTable->save($message)){
                $notif = [];
                /* Cria array de notificações para todos os usuários*/
                foreach ($usersFromGroup as $ug){
                    //If que verifica condição para nao enviar notificação para si mesmo
                    if($message->user_id != $ug['id']){
                        $notif[] = ['message_id'=>$message->id,'user_id'=>$ug['id'],'group_id'=>$id, 'status'=>0];
                    }
                }

                /* Cria entidades das notificações e salva*/
                $this->Notifications->saveMessagesNotifications($notif);
                //retorna para página do grupo
                return $this->redirect(['_name' => 'groups.view','id'=>$id]);
            }else{

                $this->Flash->error(__('Não foi possivel enviar a mensagem pois erros ocorreram:'),['params'=>['errors'=>$message->getErrors()]]);
                return $this->redirect(['_name' => 'groups.view','id'=>$id]);
            }
        }

        return $this->redirect(['_name'=>'groups.view','id'=>$id]);

    }

    /*
     * Página com os convites para grupos
     */
    public function invites(){

        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('messageNotifications',$this->messageNotifications);
        $this->set('user',$this->user);
    }

    /** Gerencia os convites para grupos
     * @param null $gid
     * @return \Cake\Http\Response|null
     */
    public function handleInvites($gid = null){
        //Recupera o tipo de ação e o id do grupo
        $type = $this->request->getParam('?')['type'];
        $gid = $this->request->getParam('gid');

        //recupera os usuarios do grupo
        $userGroupsTable = TableRegistry::get('UsersGroup');
        $userGroups = $this->Groups->UsersGroup->find()->where(['group_id'=>$gid,'user_id'=>$this->user['id']])->first();
        switch($type){
            //Se ação for aceitar, salvar com status 1
            case 'accept':
                $userGroups->invite_status = 1;
                $userGroupsTable->save($userGroups);
                $this->Flash->success(__('Convite aceito! Agora você já pode participar do grupo'));
                return $this->redirect('/dashboard/invites');
                break;
            //Se ação for rejeitar salvar com status 2
            case 'reject':
                $userGroups->invite_status = 2;
                $userGroupsTable->save($userGroups);
                $this->Flash->success(__('Convite rejeitado'));
                return $this->redirect('/dashboard/invites');
                break;

            default:
                return $this->redirect('/dashboard/invites');
        }
    }

    /**
     * Realiza sorteio de amigo secreto
     * @param null|string $id group ID
     * @param null|string $eid event ID
     * @return \Cake\Http\Response|null
     */
    public function sort($id = null,$eid=null){
        //Recupera id de grupo e evento
        $gid = $this->request->getParam('id');
        $eid = $this->request->getParam('eid');

        //Se requisição for post
        if($this->request->is('post')){
            //Recupera usuarios do grupo
            $usersFromGroup = $this->Groups->UsersGroup->find('all')->where(['group_id'=>$gid]);
            $users = [];

            foreach($usersFromGroup as $ufg){
                $users[] = $ufg['user_id'];
            }
            //Embaralha o array de ids de usuários;
            shuffle($users);
            //Separa em duas partes
            $arrHelper = array_chunk($users,count($users)/2);

            //Atribui a users1 primeira metade
            $users1 = $arrHelper[0];
            //Atribuiu a users2 a segunda metade
            $users2 = $arrHelper[1];

            //Configuração de dados do sorteio
            $lottery = [];
            for ($i = 0; $i < count($users1) ; $i++){
                $lottery[$i]['group_id'] = $gid;
                $lottery[$i]['event_id'] = $eid;
                $lottery[$i]['user1'] = $users1[$i];
                $lottery[$i]['user2'] = $users2[$i];
            }

            //Salva dados do sorteio
            $lotteryTable = TableRegistry::get('Lottery');
            $lottery = $lotteryTable->newEntities($lottery);
            $result = $lotteryTable->saveMany($lottery);

            $notif = [];
            /* Cria array de notificações para todos os usuários*/
            foreach ($usersFromGroup as $ug){
                $notif[] = ['user_id'=>$ug['user_id'],'event_id'=>$eid,'status'=>10];
            }

            /* Cria entidades das notificações e salva*/
            $this->Notifications->saveEventsNotifications($notif);

            //Se salvou os sorteios configura mensagem de sucesso, se não, configura mensagem de erro
            if($result){
                $this->Flash->success(__('Sorteio realizado com sucesso!'));
            }else{
                $this->Flash->error(__('Não foi possivel realizar o sorteio, tente novamente'));
            }

            return $this->redirect(['_name'=>'groups.viewEvent','eid'=>$eid]);
        }
        return $this->redirect(['_name'=>'groups.viewEvent','eid'=>$eid]);
    }

    /** Cria novo evento em um grupo
     * @param string|null $id
     * @return \Cake\Http\Response|null
     */
    public function newEvent($id = null){
        //Recupera id de grupo e o grupo
        $id = $this->request->getParam('id');
        $group = $this->Groups->get($id);
        //Se requisição for Post, cria evento
        if($this->request->is('post')){
            //Recupera dados do Form
            $data = $this->request->getData();
            //Valida a data que o usuário informou
            if(empty($data['time']) || empty($data['date'])){
                $this->Flash->error(__('Atenção, a data e horário do evento não podem ficar em branco'));
                return $this->redirect(['_name' => 'groups.events.new','id'=>$id]);
            }
            //Configura a data
            $data['datetime'] = $this->request->getData(['date']).' '.$this->request->getData('time');
            unset($data['time'],$data['date']);
            $data['datetime'] = Time::createFromFormat('d/m/Y H:i',$data['datetime'],'America/Sao_Paulo');

            //Cria entidade de evento
            $eventTable = TableRegistry::get('Event');
            $event = $eventTable->newEntity($data);

            if($eventTable->save($event)){
                //cria Relação entre evento e Grupo
                $groupEvent = ['group_id'=>$id,'event_id'=>$event->id];
                $groupEventEntity = $this->Groups->GroupEvents->newEntity($groupEvent);
                $this->Groups->GroupEvents->save($groupEventEntity);

                /* Recupera usuarios do grupo*/
                $usersGroup = $this->Groups->UsersGroup->find()->where(['group_id'=>$id]);
                $notif = [];
                /* Cria array de notificações para todos os usuários*/
                foreach ($usersGroup as $ug){
                    $notif[] = ['user_id'=>$ug['user_id'],'event_id'=>$event->id,'status'=>0];
                }

                /* Cria entidades das notificações e salva*/
                $this->Notifications->saveEventsNotifications($notif);

                $this->Flash->success(__('Evento '.$event->name.' criado com sucesso'));
                return $this->redirect(['_name' => 'groups.view','id'=>$id]);
            }
            $this->Flash->error(__('Não foi possivel criar o grupo pois erros ocorreram:'),['params'=>['errors'=>$event->getErrors()]]);

        }

        $this->set('group',$group);
        $this->set('user',$this->user);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('messageNotifications',$this->messageNotifications);
        $this->set('sortNotifications',$this->sortNotifications);

    }

    /** Página para visualizar evento
     * @param string|null $eid
     */
    public function viewEvent($eid = null){
        //recupera id evento
        $eid = $this->request->getParam('eid');
        //Recupera Evento, eventos do Grupo, Usuarios do Grupo, Sorteio e notificações
        $eventTable = TableRegistry::get('Event');
        $groupEventsTable = TableRegistry::get('GroupEvents');
        $usersGroupTable = TableRegistry::get('UsersGroup');
        $lotteryTable = TableRegistry::get('Lottery');
        $eventsNotificationTable = TableRegistry::get('EventsNotifications');

        //Pega o primeiro evento do grupo com id = $eid
        $groupEvents = $groupEventsTable->find()->where(['event_id'=>$eid])->first();

        //Recupera sorteio do evento
        $lottery = $lotteryTable->find()
            ->where(['group_id'=>$groupEvents->group_id,'event_id'=>$eid,'user1'=>$this->user['id']])
            ->orWhere(['group_id'=>$groupEvents->group_id,'event_id'=>$eid,'user2'=>$this->user['id']])
            ->first();
        //Recupera criador do grupo
        $creator = $usersGroupTable->find()
            ->where(['group_id'=>$groupEvents->group_id,'user_id'=>$this->user['id'],'role'=>2])
            ->first();

        //Variavel para salvar amigo secreto do usuario
        $myFriend = null;

        //Recupera amigo secreto do usuario, se o sorteio ja foi realizado ($lottery != null)
        if(!is_null($lottery)){
            $userTable = TableRegistry::get('Users');
            if($lottery->user1 == $this->user['id'])
                $myFriend = $userTable->get($lottery->user2);
            else
                $myFriend = $userTable->get($lottery->user1);
            $myFriend['preferences'] = explode(',',$myFriend['preferences']);
        }
        //Recupera evento com data > que agora
        $query = $eventTable->find('all')
            ->where(['id'=>$eid,'datetime >'=>Time::now('America/Sao_Paulo')])
            ->matching('GroupEvents',function($q) use($eid){
                return $q->where(['event_id'=>$eid]);
            });


        /** atualiza notificação para vista (status 1) */
        $notification = $eventsNotificationTable->find()
            ->where(['user_id'=>$this->user['id'],'event_id'=>$eid,'status'=>0])
            ->orWhere(['user_id'=>$this->user['id'],'event_id'=>$eid,'status'=>10])
            ->first();
        if(!is_null($notification)){
           $notification->status = 1;
           $eventsNotificationTable->save($notification);
        }

        $event = $query->first();

        //Configura variaveis para view
        $this->set('user',$this->user);
        $this->set('creator',$creator);
        $this->set('myFriend',$myFriend);
        $this->set('lottery',$lottery);
        $this->set('event',$event);
        $this->set('invites',$this->invites);
        $this->set('eventNotifications',$this->eventNotifications);
        $this->set('sortNotifications',$this->sortNotifications);
        $this->set('messageNotifications',$this->messageNotifications);
    }
}
